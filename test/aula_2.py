# # -*- coding: utf-8 -*-
# """Aula_2 (2).ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1WR9R9Mm9FPSEbl79j78KnjCceig2OvFt

# # Projeto 2: Como pegar dados em sites e automatizar a criação da carteira do nosso modelo.

# ### Desafio:

# * Construir um código que vá no fundamentus.com e busque dados de todos os indicadores da bolsa brasileira e gere a carteira selecionando as maiores ev_ebit e roic.    


# ### Passo a passo:

#    **Passo 1** - Definir um navegador que você irá utilizar para navegar com o Python.

#    **Passo 2** - Importar os módulos e bibliotecas.
   
#    **Passo 3** - Entender como funcionam requisições na internet.
   
#    **Passo 4** - Entender como sites funcionam.
   
#    **Passo 5** - Conhecer e mapear o processo de coleta de dados no site do Fundamentus.
   
#    **Passo 6** - Ler a tabela de dados.
   
#    **Passo 7** - Construir a tabela final.

# # Passo 1: Escolher o navegador.

# No nosso caso, utilizaremos o Google Chrome.

# # Passo 2: Importar as bibliotecas.
# """

# # !pip install selenium

# # pip install webdriver-manager

# from selenium import webdriver
# from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager
# import pandas as pd

# """# Passo 3: Entender como funcionam requisições na internet."""

# driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))

# url = 'https://www.fundamentus.com.br/resultado.php'

# driver.get(url)

# """# Passo 4: Entender como sites funcionam.

# # Passo 5: Mapear o processo de coleta de dados no site do Fundamentus.

# https://www.fundamentus.com.br/index.php

# # Passo 6 - Ler a tabela de dados.
# """

# local_tabela = '/html/body/div[1]/div[2]/table'

# elemento = driver.find_element("xpath", local_tabela)

# html_tabela = elemento.get_attribute('outerHTML')

# tabela = pd.read_html(str(html_tabela), thousands = '.', decimal = ',')[0]

# """# Passo 7 - Construir a tabela final."""

# tabela = tabela.set_index("Papel")
# tabela = tabela[['Cotação', 'EV/EBIT', 'ROIC', 'Liq.2meses']]

# tabela

# """### Temos que transformar o texto em números.."""

# tabela.info()

# #tabela['EV/EBIT'] * tabela['ROIC']

# """# Passo 7.2: Tratar o texto."""

# tabela['ROIC'] = tabela['ROIC'].str.replace("%", "")
# tabela['ROIC'] = tabela['ROIC'].str.replace(".", "")
# tabela['ROIC'] = tabela['ROIC'].str.replace(",", ".")
# tabela['ROIC'] = tabela['ROIC'].astype(float)
# print(tabela)

# """# Passo 7.3: Fazendo os filtros e criando os rankings."""

# tabela = tabela[tabela['Liq.2meses'] > 1000000]

# tabela = tabela[tabela['EV/EBIT'] > 0]
# tabela = tabela[tabela['ROIC'] > 0]

# tabela['ranking_ev_ebit'] = tabela['EV/EBIT'].rank(ascending = True)
# tabela['ranking_roic'] = tabela['ROIC'].rank(ascending = False)
# tabela['ranking_total'] = tabela['ranking_ev_ebit'] + tabela['ranking_roic']

# tabela = tabela.sort_values('ranking_total')

# tabela.head(10)











from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd
import yfinance as yf
from finta import TA

# Set up the Chrome driver
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))

# Navigate to the URL
url = 'https://www.fundamentus.com.br/resultado.php'
driver.get(url)

# Find the table element
local_tabela = '/html/body/div[1]/div[2]/table'
elemento = driver.find_element("xpath", local_tabela)
html_tabela = elemento.get_attribute('outerHTML')
tabela = pd.read_html(str(html_tabela), thousands='.', decimal=',')[0]

# Clean up and preprocess the data
tabela = tabela.set_index("Papel")
tabela = tabela[['Cotação', 'EV/EBIT', 'ROIC', 'Liq.2meses']]

tabela['ROIC'] = tabela['ROIC'].str.replace("%", "")
tabela['ROIC'] = tabela['ROIC'].str.replace(".", "")
tabela['ROIC'] = tabela['ROIC'].str.replace(",", ".")
tabela['ROIC'] = tabela['ROIC'].astype(float)

tabela = tabela[tabela['Liq.2meses'] > 1000000]
tabela = tabela[tabela['EV/EBIT'] > 0]
tabela = tabela[tabela['ROIC'] > 0]

tabela['ranking_ev_ebit'] = tabela['EV/EBIT'].rank(ascending = True)
tabela['ranking_roic'] = tabela['ROIC'].rank(ascending = False)
tabela['ranking_total'] = tabela['ranking_ev_ebit'] + tabela['ranking_roic']

tabela = tabela.sort_values('ranking_total')

# Exclui a primeira linha onde o valor é "Papel"
tabela = tabela.iloc[1:]

# Extrai os valores da coluna "Papel"
parametros = tabela.head(10).index.tolist()

print(parametros)

decisions = {}  # Dicionário para armazenar decisões
for ticker in parametros:
    try:
        data = yf.download(ticker + ".SA", period="1y")  # Baixa dados do último ano
        
        # Se os dados estiverem vazios, pule para o próximo ticker
        if data.empty:
            print(f"Sem dados para o ticker {ticker}. Pulando...")
            continue
        
        # Calcula médias móveis
        sma_50 = TA.SMA(data, 50)
        sma_200 = TA.SMA(data, 200)
        
        # Bandas de Bollinger
        bollinger = TA.BBANDS(data)
        
        # RSI
        rsi = TA.RSI(data)

        # Sistema de pontos
        points = 0

        # Golden Cross
        if sma_50.iloc[-2] < sma_200.iloc[-2] and sma_50.iloc[-1] > sma_200.iloc[-1]:
            points += 1
        # Death Cross
        elif sma_50.iloc[-2] > sma_200.iloc[-2] and sma_50.iloc[-1] < sma_200.iloc[-1]:
            points -= 1
        # RSI Sobrevendido
        if rsi.iloc[-1] < 30:
            points += 1
        # RSI Sobrecomprado
        elif rsi.iloc[-1] > 70:
            points -= 1
        # Acima da Banda Superior
        if data['Close'].iloc[-1] > bollinger['BB_UPPER'].iloc[-1]:
            points -= 1
        # Abaixo da Banda Inferior
        elif data['Close'].iloc[-1] < bollinger['BB_LOWER'].iloc[-1]:
            points += 1

        # Decisão com base nos pontos
        if points > 0:
            decision = "BUY"
        elif points < 0:
            decision = "SELL"
        else:
            decision = "HOLD"

        # Armazena a decisão no dicionário
        decisions[ticker] = decision

        # Exemplo de visualização
        print(ticker, "-", decision)
        print("------")
    
    except Exception as e:
        print(f"Erro ao processar o ticker {ticker}: {e}")

# Exemplo de visualização do dicionário de decisões
print(decisions)














# from selenium import webdriver
# from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager
# import pandas as pd
# import yfinance as yf
# from finta import TA

# # Set up the Chrome driver
# driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))

# # Navigate to the URL
# url = 'https://www.fundamentus.com.br/resultado.php'
# driver.get(url)

# # Find the table element
# local_tabela = '/html/body/div[1]/div[2]/table'
# elemento = driver.find_element("xpath", local_tabela)
# html_tabela = elemento.get_attribute('outerHTML')
# tabela = pd.read_html(str(html_tabela), thousands='.', decimal=',')[0]

# # Clean up and preprocess the data
# tabela = tabela.set_index("Papel")
# tabela = tabela[['Cotação', 'EV/EBIT', 'ROIC', 'Liq.2meses']]

# tabela['ROIC'] = tabela['ROIC'].str.replace("%", "")
# tabela['ROIC'] = tabela['ROIC'].str.replace(".", "")
# tabela['ROIC'] = tabela['ROIC'].str.replace(",", ".")
# tabela['ROIC'] = tabela['ROIC'].astype(float)

# tabela = tabela[tabela['Liq.2meses'] > 1000000]
# tabela = tabela[tabela['EV/EBIT'] > 0]
# tabela = tabela[tabela['ROIC'] > 0]

# # Fetch stock data and calculate technical indicators
# selected_stocks = []
# for symbol in tabela.index:
#     try:
#         stock = yf.Ticker(f'{symbol}.SA')
#         history = stock.history(period="1y")
        
#         # Calculate additional parameters like volume, volatility, etc.
#         history['Volatility'] = TA.ATR(history)
#         history['50_MA'] = TA.SMA(history, 50)
#         history['200_MA'] = TA.SMA(history, 200)
#         history['Bollinger_High'] = TA.BBANDS(history)['BB_HIGH']
#         history['Bollinger_Low'] = TA.BBANDS(history)['BB_LOW']
        
#         # You can define your own criteria here for selecting stocks
#         if history['Volatility'].iloc[-1] > 0.2 and history['Volume'].iloc[-1] > 10000:
#             selected_stocks.append(symbol)
#     except:
#         pass
    

# print(selected_stocks)

# # Create a ranking based on the criteria
# ranking = []
# for symbol in selected_stocks:
#     ranking_score = tabela.loc[symbol, 'ROIC'] + tabela.loc[symbol, 'EV/EBIT']
#     ranking.append((symbol, ranking_score))

# ranking.sort(key=lambda x: x[1], reverse=True)

# # Display the top 10 stocks
# if ranking:
#     print("Top 10 Stocks for Day Trading:")
#     for rank, (symbol, score) in enumerate(ranking[:10], start=1):
#         print(f"{rank}. {symbol} - Score: {score:.2f}")
# else:
#     print("No suitable stocks found for day trading.")


